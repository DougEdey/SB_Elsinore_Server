schema {
  query: Query
  mutation: Mutation
}

#Mutation root type
type Mutation {
  addTemperatureProbe(device: String, name: String): TempRunner @_mappedOperation(operation : "__java type__")
  deleteProbe(id: Long): Long @_mappedOperation(operation : "__java type__")
  updateSystemSettings(breweryName: String, owfsEnabled: Boolean, owfsPort: Int, owfsServer: String, recorderEnabled: Boolean, restoreState: Boolean, scale: String, serverPort: Int, theme: String): SystemSettings @_mappedOperation(operation : "__java type__")
}

#Query root type
type Query {
  findTempRunnerByName(name: String): TempRunner @_mappedOperation(operation : "__java type__")
  getSystemSettings: SystemSettings @_mappedOperation(operation : "__java type__")
  tempProbes: [TempProbe] @_mappedOperation(operation : "__java type__")
  tempRunners: [TempRunner] @_mappedOperation(operation : "__java type__")
  temperatureModels: [TemperatureModel] @_mappedOperation(operation : "__java type__")
}

type SystemSettings @_mappedType(type : "__java type__") {
  breweryName: String @_mappedOperation(operation : "__java type__")
  id: Long @_mappedOperation(operation : "__java type__")
  owfsEnabled: Boolean! @_mappedOperation(operation : "__java type__")
  owfsPort: Int! @_mappedOperation(operation : "__java type__")
  owfsServer: String @_mappedOperation(operation : "__java type__")
  recorderEnabled: Boolean! @_mappedOperation(operation : "__java type__")
  restoreState: Boolean! @_mappedOperation(operation : "__java type__")
  scale: String @_mappedOperation(operation : "__java type__")
  serverPort: Int! @_mappedOperation(operation : "__java type__")
  theme: String @_mappedOperation(operation : "__java type__")
}

type TempProbe @_mappedType(type : "__java type__") {
  calibration: BigDecimal @_mappedOperation(operation : "__java type__")
  cutoff: String @_mappedOperation(operation : "__java type__")
  cutoffEnabled: Boolean! @_mappedOperation(operation : "__java type__")
  cutoffTemp: BigDecimal @_mappedOperation(operation : "__java type__")
  device: String @_mappedOperation(operation : "__java type__")
  gravity: BigDecimal @_mappedOperation(operation : "__java type__")
  hidden: Boolean! @_mappedOperation(operation : "__java type__")
  i2cAddress: String @_mappedOperation(operation : "__java type__")
  i2cChannel: String @_mappedOperation(operation : "__java type__")
  i2cNumber: String @_mappedOperation(operation : "__java type__")
  i2cType: String @_mappedOperation(operation : "__java type__")
  id: Long @_mappedOperation(operation : "__java type__")
  model: TemperatureModel @_mappedOperation(operation : "__java type__")
  name: String @_mappedOperation(operation : "__java type__")
  position: Int! @_mappedOperation(operation : "__java type__")
  scale: String @_mappedOperation(operation : "__java type__")
  setup: Boolean! @_mappedOperation(operation : "__java type__")
  triggerControl: TriggerControl @_mappedOperation(operation : "__java type__")
  volume: BigDecimal @_mappedOperation(operation : "__java type__")
  volumeAIN: String @_mappedOperation(operation : "__java type__")
  volumeAddress: String @_mappedOperation(operation : "__java type__")
  volumeBase: ConcurrentHashMap_BigDecimal_BigDecimalScalar @_mappedOperation(operation : "__java type__")
  volumeMeasurementEnabled: Boolean! @_mappedOperation(operation : "__java type__")
  volumeOffset: String @_mappedOperation(operation : "__java type__")
  volumeUnit: String @_mappedOperation(operation : "__java type__")
}

type TempRunner @_mappedType(type : "__java type__") {
  id: Long @_mappedOperation(operation : "__java type__")
  name: String @_mappedOperation(operation : "__java type__")
  running: Boolean! @_mappedOperation(operation : "__java type__")
  scale: String @_mappedOperation(operation : "__java type__")
  started: Boolean! @_mappedOperation(operation : "__java type__")
  tempF: BigDecimal @_mappedOperation(operation : "__java type__")
  tempInterface: TemperatureInterface @_mappedOperation(operation : "__java type__")
  temperature: BigDecimal @_mappedOperation(operation : "__java type__")
}

type TemperatureInterface @_mappedType(type : "__java type__") {
  calibration: BigDecimal @_mappedOperation(operation : "__java type__")
  cutoffTemp: BigDecimal @_mappedOperation(operation : "__java type__")
  device: String @_mappedOperation(operation : "__java type__")
  hidden: Boolean! @_mappedOperation(operation : "__java type__")
  i2cAddress: String @_mappedOperation(operation : "__java type__")
  i2cChannel: String @_mappedOperation(operation : "__java type__")
  i2cNumber: String @_mappedOperation(operation : "__java type__")
  i2cType: String @_mappedOperation(operation : "__java type__")
  id: Long @_mappedOperation(operation : "__java type__")
  model: TemperatureModel @_mappedOperation(operation : "__java type__")
  name: String @_mappedOperation(operation : "__java type__")
  position: Int! @_mappedOperation(operation : "__java type__")
  scale: String @_mappedOperation(operation : "__java type__")
  volumeAIN: String @_mappedOperation(operation : "__java type__")
  volumeAddress: String @_mappedOperation(operation : "__java type__")
  volumeMeasurementEnabled: Boolean! @_mappedOperation(operation : "__java type__")
  volumeOffset: String @_mappedOperation(operation : "__java type__")
  volumeUnit: String @_mappedOperation(operation : "__java type__")
}

type TemperatureModel @_mappedType(type : "__java type__") {
  calibration: BigDecimal @_mappedOperation(operation : "__java type__")
  cutoffTemp: BigDecimal @_mappedOperation(operation : "__java type__")
  device: String @_mappedOperation(operation : "__java type__")
  hidden: Boolean! @_mappedOperation(operation : "__java type__")
  i2cAddress: String @_mappedOperation(operation : "__java type__")
  i2cChannel: String @_mappedOperation(operation : "__java type__")
  i2cNumber: String @_mappedOperation(operation : "__java type__")
  i2cType: String @_mappedOperation(operation : "__java type__")
  id: Long @_mappedOperation(operation : "__java type__")
  model: TemperatureModel @_mappedOperation(operation : "__java type__")
  name: String @_mappedOperation(operation : "__java type__")
  nameLowercased: String @_mappedOperation(operation : "__java type__")
  position: Int! @_mappedOperation(operation : "__java type__")
  scale: String @_mappedOperation(operation : "__java type__")
  volumeAIN: String @_mappedOperation(operation : "__java type__")
  volumeAddress: String @_mappedOperation(operation : "__java type__")
  volumeMeasurementEnabled: Boolean! @_mappedOperation(operation : "__java type__")
  volumeOffset: String @_mappedOperation(operation : "__java type__")
  volumeUnit: String @_mappedOperation(operation : "__java type__")
}

type TriggerControl @_mappedType(type : "__java type__") {
  active: Boolean! @_mappedOperation(operation : "__java type__")
  currentTrigger: TriggerInterface @_mappedOperation(operation : "__java type__")
  triggersSize: Int! @_mappedOperation(operation : "__java type__")
}

type TriggerInterface @_mappedType(type : "__java type__") {
  active: Boolean! @_mappedOperation(operation : "__java type__")
  name: String @_mappedOperation(operation : "__java type__")
  position: Int @_mappedOperation(operation : "__java type__")
}

type __Directive {
  args: [__InputValue!]!
  description: String
  locations: [__DirectiveLocation!]
  name: String
  onField: Boolean
  onFragment: Boolean
  onOperation: Boolean
}

type __EnumValue {
  deprecationReason: String
  description: String
  isDeprecated: Boolean!
  name: String!
}

type __Field {
  args: [__InputValue!]!
  deprecationReason: String
  description: String
  isDeprecated: Boolean!
  name: String!
  type: __Type!
}

type __InputValue {
  defaultValue: String
  description: String
  name: String!
  type: __Type!
}

#A GraphQL Introspection defines the capabilities of a GraphQL server. It exposes all available types and directives on the server, the entry points for query, mutation, and subscription operations.
type __Schema {
  #'A list of all directives supported by this server.
  directives: [__Directive!]!
  #If this server supports mutation, the type that mutation operations will be rooted at.
  mutationType: __Type
  #The type that query operations will be rooted at.
  queryType: __Type!
  #'If this server support subscription, the type that subscription operations will be rooted at.
  subscriptionType: __Type
  #A list of all types supported by this server.
  types: [__Type!]!
}

type __Type {
  description: String
  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]
  fields(includeDeprecated: Boolean = false): [__Field!]
  inputFields: [__InputValue!]
  interfaces: [__Type!]
  kind: __TypeKind!
  name: String
  ofType: __Type
  possibleTypes: [__Type!]
}

#An enum describing valid locations where a directive can be placed
enum __DirectiveLocation {
  #Indicates the directive is valid on a field argument SDL definition.
  ARGUMENT_DEFINITION
  #Indicates the directive is valid on an enum SDL definition.
  ENUM
  #Indicates the directive is valid on an enum value SDL definition.
  ENUM_VALUE
  #Indicates the directive is valid on fields.
  FIELD
  #Indicates the directive is valid on a field SDL definition.
  FIELD_DEFINITION
  #Indicates the directive is valid on fragment definitions.
  FRAGMENT_DEFINITION
  #Indicates the directive is valid on fragment spreads.
  FRAGMENT_SPREAD
  #Indicates the directive is valid on inline fragments.
  INLINE_FRAGMENT
  #Indicates the directive is valid on an input object field SDL definition.
  INPUT_FIELD_DEFINITION
  #Indicates the directive is valid on an input object SDL definition.
  INPUT_OBJECT
  #Indicates the directive is valid on an interface SDL definition.
  INTERFACE
  #Indicates the directive is valid on mutations.
  MUTATION
  #Indicates the directive is valid on an object SDL definition.
  OBJECT
  #Indicates the directive is valid on queries.
  QUERY
  #Indicates the directive is valid on a scalar SDL definition.
  SCALAR
  #Indicates the directive is valid on a schema SDL definition.
  SCHEMA
  #Indicates the directive is valid on an union SDL definition.
  UNION
}

#An enum describing what kind of type a given __Type is
enum __TypeKind {
  #Indicates this type is an enum. `enumValues` is a valid field.
  ENUM
  #Indicates this type is an input object. `inputFields` is a valid field.
  INPUT_OBJECT
  #Indicates this type is an interface. `fields` and `possibleTypes` are valid fields.
  INTERFACE
  #Indicates this type is a list. `ofType` is a valid field.
  LIST
  #Indicates this type is a non-null. `ofType` is a valid field.
  NON_NULL
  #Indicates this type is an object. `fields` and `interfaces` are valid fields.
  OBJECT
  #Indicates this type is a scalar.
  SCALAR
  #Indicates this type is a union. `possibleTypes` is a valid field.
  UNION
}

#Built-in java.math.BigDecimal
scalar BigDecimal

#Built-in scalar for map-like structures
scalar ConcurrentHashMap_BigDecimal_BigDecimalScalar

#Long type
scalar Long
