#!/usr/bin/env node

// Generated by CoffeeScript 2.0.1
(function() {
  var IncomingForm, createTransport, http, polaris, smtp, util;

  ({IncomingForm} = require('formidable'));

  ({createTransport} = require('nodemailer'));

  http = require('http');

  util = require('util');

  polaris = module.exports;

  polaris.config = {
    listen: {
      host: 'localhost',
      port: 8080
    },
    transport: {
      name: 'Direct'
    },
    recipients: {}
  };

  smtp = null;

  // Load config from a JSON file
  polaris.loadConfig = function(filename) {
    console.log(`Loading config from ${filename}...`);
    return polaris.config = require(filename);
  };

  // HTTP / Connect / Express request handler
  polaris.handler = function(req, res) {
    var form, transportConfig;
    form = new IncomingForm();
    if (!smtp) {
      transportConfig = polaris.config.transport;
      smtp = createTransport(transportConfig.options);
    }
    return form.parse(req, function(err, fields, files) {
      var field, file, i, len, name, options, recipient, ref;
      // Get the recipient config
      recipient = polaris.config.recipients[fields.recipient];
      if (!recipient || !fields.from || !fields.message) {
        res.writeHead(400, {
          'content-type': 'text/plain'
        });
        return res.end("Bad recipient or missing required parameters:\n" + util.inspect(fields));
      }
      if (fields.name) {
        fields.from = `${fields.name} <${fields.from}>`;
      }
      ref = ['phone', 'location'];
      for (i = 0, len = ref.length; i < len; i++) {
        field = ref[i];
        if (fields[field]) {
          fields.message = `${field}: ${fields[field]}\n\n${fields.message}`;
        }
      }
      // Send the mail
      console.log(`${fields.from} -> ${recipient.to}`);
      console.log(`Message: ${fields.message}`);
      options = {
        from: fields.from,
        replyTo: fields.from,
        to: recipient.to,
        subject: fields.title || recipient.title || 'Email form',
        text: fields.message
      };
      // Only attach files if allowed
      if (files && recipient.allowFiles) {
        options.attachments = [];
        for (name in files) {
          file = files[name];
          options.attachments.push({
            fileName: file.name,
            filePath: file.path
          });
        }
      }
      // Send mail to recipients
      return smtp.sendMail(options, function(err, response) {
        if (err) {
          res.writeHead(500, {
            'content-type': 'text/plain'
          });
          return res.end(err.toString());
        }
        res.writeHead(302, {
          location: recipient.redirect
        });
        return res.end();
      });
    });
  };

  // Create an HTTP server and listen for POST requests
  polaris.runServer = function(done) {
    var app, listenConfig;
    app = http.createServer(function(req, res) {
      // Enable CORS
      res.setHeader("Access-Control-Allow-Origin", "*");
      res.setHeader("Access-Control-Allow-Headers", "X-Requested-With");
      // Handle requests
      if (req.url === '/' && req.method.toLowerCase() === 'post') {
        return polaris.handler(req, res);
      }
    });
    listenConfig = polaris.config.listen;
    return app.listen(listenConfig.port, listenConfig.host, function() {
      console.log(`Listening on ${polaris.config.listen.host}:` + `${polaris.config.listen.port}`);
      return typeof done === "function" ? done(null, app) : void 0;
    });
  };

  if (require.main === module) {
    if (process.argv.length > 2) {
      polaris.loadConfig(require('path').resolve(process.argv[2]));
    }
    polaris.runServer();
  }

}).call(this);
