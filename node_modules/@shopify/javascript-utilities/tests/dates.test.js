"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var dates_1 = require("../dates");
describe('abbreviationForWeekday()', function () {
    it('abbreviates the word correctly', function () {
        expect(dates_1.abbreviationForWeekday(dates_1.Weekdays.Sunday)).toBe('Su');
        expect(dates_1.abbreviationForWeekday(dates_1.Weekdays.Monday)).toBe('Mo');
        expect(dates_1.abbreviationForWeekday(dates_1.Weekdays.Tuesday)).toBe('Tu');
        expect(dates_1.abbreviationForWeekday(dates_1.Weekdays.Wednesday)).toBe('We');
        expect(dates_1.abbreviationForWeekday(dates_1.Weekdays.Thursday)).toBe('Th');
        expect(dates_1.abbreviationForWeekday(dates_1.Weekdays.Friday)).toBe('Fr');
        expect(dates_1.abbreviationForWeekday(dates_1.Weekdays.Saturday)).toBe('Sa');
    });
});
describe('getWeeksForMonth()', function () {
    it('starts the week on Sunday by default', function () {
        var weeks = dates_1.getWeeksForMonth(1, 2018);
        weeks.map(function (week) {
            var startDay = week[0];
            if (startDay !== null) {
                expect(startDay.getDay()).toBe(dates_1.Weekdays.Sunday);
            }
        });
    });
    it('always has 7 value for each weeks', function () {
        var weeks = dates_1.getWeeksForMonth(6, 2018);
        weeks.map(function (week) {
            expect(week).toHaveLength(7);
        });
    });
    it('first day of the week is the one passed as argument', function () {
        [
            dates_1.Weekdays.Sunday,
            dates_1.Weekdays.Monday,
            dates_1.Weekdays.Tuesday,
            dates_1.Weekdays.Wednesday,
            dates_1.Weekdays.Thursday,
            dates_1.Weekdays.Friday,
            dates_1.Weekdays.Saturday,
        ].map(function (weekDay) {
            var weeks = dates_1.getWeeksForMonth(8, 2018, weekDay);
            weeks.map(function (week) {
                var startDay = week[0];
                if (startDay !== null) {
                    expect(startDay.getDay()).toBe(weekDay);
                }
                else {
                    expect(startDay).toBeNull();
                }
            });
        });
    });
    it('sets values to null before first day of month', function () {
        var weeks = dates_1.getWeeksForMonth(6, 2018, dates_1.Weekdays.Monday);
        expect(weeks[0][0]).toBeNull();
        expect(weeks[0][1]).toBeNull();
        expect(weeks[0][2]).toBeNull();
        expect(weeks[0][3]).toBeNull();
        expect(weeks[0][4]).toBeNull();
        expect(weeks[0][5]).toBeNull();
        expect(weeks[0][6]).not.toBeNull();
    });
});
