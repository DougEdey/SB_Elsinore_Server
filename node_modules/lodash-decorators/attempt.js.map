{"version":3,"file":"attempt.js","sourceRoot":"","sources":["src/attempt.ts"],"names":[],"mappings":";;AAAA,wCAA2C;AAC3C,wCAA2C;AAE3C,qCAAqF;AACrF,6CAAmD;AAEnD,IAAM,SAAS,GAAG,UAAC,EAAc,IAAK,OAAA,OAAO,CAAC,OAAO,EAAE,EAAE,CAAC,EAApB,CAAoB,CAAC;AAC3D,IAAM,SAAS,GAAG,0BAAgB,CAAC,eAAe,CAChD,IAAI,yBAAe,CAAC,SAAS,EAAE,IAAI,gCAAkB,EAAE,CAAC,CACzD,CAAC;AAEF;;;;;;;;;;;;;;;;;;;;GAoBG;AACH;IAAwB,kBAAkB;SAAlB,UAAkB,EAAlB,qBAAkB,EAAlB,IAAkB;QAAlB,6BAAkB;;IACxC,MAAM,CAAC,SAAS,eAAI,QAAQ,EAAE;AAChC,CAAC;AAFD,0BAEC;AACmB,0BAAO;AAC3B,kBAAe,SAAS,CAAC","sourcesContent":["import attempt = require('lodash/attempt');\nimport partial = require('lodash/partial');\n\nimport { DecoratorConfig, DecoratorFactory, LodashMethodDecorator } from './factory';\nimport { PreValueApplicator } from './applicators';\n\nconst attemptFn = (fn: () => void) => partial(attempt, fn);\nconst decorator = DecoratorFactory.createDecorator(\n  new DecoratorConfig(attemptFn, new PreValueApplicator())\n);\n\n/**\n * Attempts to invoke func, returning either the result or the caught error object. Any additional arguments are provided to func when it's invoked.\n * @param {...*} [args] The arguments to invoke func with.\n * @example\n *\n * class MyClass {\n *   @Attempt()\n *   fn(value) {\n *     if (typeof value === 'number') {\n *       return value\n *     }\n *\n *     throw new Error();\n *   }\n * }\n *\n * const myClass = new MyClass();\n *\n * myClass.fn(10); // => 10;\n * myClass.fn(null); // => Error\n */\nexport function Attempt(...partials: any[]): LodashMethodDecorator {\n  return decorator(...partials);\n}\nexport { Attempt as attempt };\nexport default decorator;\n"]}