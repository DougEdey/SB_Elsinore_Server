{"version":3,"file":"rearg.js","sourceRoot":"","sources":["src/rearg.ts"],"names":[],"mappings":";;AAAA,oCAAuC;AAEvC,qCAKmB;AACnB,6CAAuD;AAEvD,IAAM,SAAS,GAAG,0BAAgB,CAAC,uBAAuB,CACxD,IAAI,yBAAe,CAAC,KAAK,EAAE,IAAI,oCAAsB,EAAE,EAAE,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC,CAC7E,CAAC;AAEF,eAAsB,OAA+C;IAAE,cAAiC;SAAjC,UAAiC,EAAjC,qBAAiC,EAAjC,IAAiC;QAAjC,6BAAiC;;IACtG,MAAM,CAAC,SAAS,gBAAC,OAAO,SAAK,IAAI,GAAE;AACrC,CAAC;AAFD,sBAEC;AACiB,sBAAK;AACvB,kBAAe,SAAS,CAAC","sourcesContent":["import rearg = require('lodash/rearg');\n\nimport {\n  DecoratorConfig,\n  DecoratorFactory,\n  LodashDecorator,\n  ResolvableFunction\n} from './factory';\nimport { PartialValueApplicator } from './applicators';\n\nconst decorator = DecoratorFactory.createInstanceDecorator(\n  new DecoratorConfig(rearg, new PartialValueApplicator(), { property: true })\n);\n\nexport function Rearg(indexes: ResolvableFunction | number | number[], ...args: Array<number | number[]>): LodashDecorator {\n  return decorator(indexes, ...args);\n}\nexport { Rearg as rearg };\nexport default decorator;\n"]}