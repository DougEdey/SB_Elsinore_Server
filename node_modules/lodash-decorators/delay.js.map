{"version":3,"file":"delay.js","sourceRoot":"","sources":["src/delay.ts"],"names":[],"mappings":";;AAAA,oCAAuC;AAEvC,qCAAqF;AACrF,6CAAmD;AAEnD,IAAM,SAAS,GAAG,0BAAgB,CAAC,eAAe,CAChD,IAAI,yBAAe,CACjB,UAAS,KAAe,EAAE,IAAY;IAAE,cAAc;SAAd,UAAc,EAAd,qBAAc,EAAd,IAAc;QAAd,6BAAc;;IACpD,MAAM,CAAC;QAAS,oBAAoB;aAApB,UAAoB,EAApB,qBAAoB,EAApB,IAAoB;YAApB,+BAAoB;;QAClC,MAAM,CAAC,KAAK,gBAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,IAAI,SAAK,UAAU,EAAK,IAAI,GAAE;IAC/D,CAAC,CAAC;AACJ,CAAC,EACD,IAAI,gCAAkB,EAAE,EACxB,EAAE,MAAM,EAAE,IAAI,EAAE,CACjB,CACF,CAAC;AAEF;;;;;;;;;;;;;;;;;;;;;;;;;GAyBG;AACH,eAAsB,IAAY;IAAE,cAAc;SAAd,UAAc,EAAd,qBAAc,EAAd,IAAc;QAAd,6BAAc;;IAChD,MAAM,CAAC,SAAS,gBAAC,IAAI,SAAK,IAAI,GAAE;AAClC,CAAC;AAFD,sBAEC;AACiB,sBAAK;AACvB,kBAAe,SAAS,CAAC","sourcesContent":["import delay = require('lodash/delay');\n\nimport { DecoratorConfig, DecoratorFactory, LodashMethodDecorator } from './factory';\nimport { PreValueApplicator } from './applicators';\n\nconst decorator = DecoratorFactory.createDecorator(\n  new DecoratorConfig(\n    function(value: Function, wait: number, ...args: any[]) {\n      return function(...invokeArgs: any[]): any {\n        return delay(value.bind(this), wait, ...invokeArgs, ...args);\n      };\n    },\n    new PreValueApplicator(),\n    { setter: true }\n  )\n);\n\n/**\n * Invokes func after wait milliseconds. Any additional arguments are provided to func when it's invoked.\n *\n * @param {number} wait The number of milliseconds to delay invocation.\n * @param {...*} [args] Additional arguments to invoke the function with\n * @example\n *\n * class MyClass {\n *   value = 100;\n *\n *   @Delay(20)\n *   add(a) {\n *     this.value += a;\n *   }\n * }\n *\n * const myClass = new MyClass();\n *\n * myClass.add(10);\n *\n * myClass.value; // => 100;\n *\n * setTimeout(() => {\n *   myClass.value; // => 110;\n * }, 30);\n */\nexport function Delay(wait: number, ...args: any[]): LodashMethodDecorator {\n  return decorator(wait, ...args);\n}\nexport { Delay as delay };\nexport default decorator;\n"]}