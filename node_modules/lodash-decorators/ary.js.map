{"version":3,"file":"ary.js","sourceRoot":"","sources":["src/ary.ts"],"names":[],"mappings":";;AAAA,gCAAmC;AAEnC,qCAAqF;AACrF,6CAAmD;AAEnD,IAAM,SAAS,GAAG,0BAAgB,CAAC,eAAe,CAChD,IAAI,yBAAe,CAAC,GAAG,EAAE,IAAI,gCAAkB,EAAE,CAAC,CACnD,CAAC;AAEF;;;;;;;;;;;;;;;GAeG;AACH,aAAoB,CAAS;IAC3B,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;AACtB,CAAC;AAFD,kBAEC;AACe,kBAAG;AACnB,kBAAe,SAAS,CAAC","sourcesContent":["import ary = require('lodash/ary');\n\nimport { DecoratorConfig, DecoratorFactory, LodashMethodDecorator } from './factory';\nimport { PreValueApplicator } from './applicators';\n\nconst decorator = DecoratorFactory.createDecorator(\n  new DecoratorConfig(ary, new PreValueApplicator())\n);\n\n/**\n * Creates a function that invokes func, with up to n arguments, ignoring any additional arguments.\n * @param {number} n The arity cap.\n * @example\n *\n * class MyClass {\n *   @Ary(1)\n *   fn(...args) {\n *     return args;\n *   }\n * }\n *\n * const myClass = new MyClass();\n *\n * myClass.fn(1, 2, 3, 4); // => [ 1 ]\n */\nexport function Ary(n: number): LodashMethodDecorator {\n  return decorator(n);\n}\nexport { Ary as ary };\nexport default decorator;\n"]}