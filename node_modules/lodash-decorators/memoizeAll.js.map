{"version":3,"file":"memoizeAll.js","sourceRoot":"","sources":["src/memoizeAll.ts"],"names":[],"mappings":";;AAAA,wCAA2C;AAE3C,qCAAqF;AACrF,6CAAkD;AAGlD,IAAM,SAAS,GAAG,0BAAgB,CAAC,eAAe,CAChD,IAAI,yBAAe,CAAC,OAAO,EAAE,IAAI,+BAAiB,EAAE,CAAC,CACtD,CAAC;AAEF;;;GAGG;AACH,oBAA2B,QAA6C;IACtE,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;AAC7B,CAAC;AAFD,gCAEC;AACsB,gCAAU;AACjC,kBAAe,SAAS,CAAC","sourcesContent":["import memoize = require('lodash/memoize');\n\nimport { DecoratorConfig, DecoratorFactory, LodashMethodDecorator } from './factory';\nimport { MemoizeApplicator } from './applicators';\nimport { MemoizeConfig } from './shared';\n\nconst decorator = DecoratorFactory.createDecorator(\n  new DecoratorConfig(memoize, new MemoizeApplicator())\n);\n\n/**\n * Memoizes a function on the prototype instead of the instance. All instances of the class use the same memoize cache.\n * @param {Function} [resolver] Optional resolver\n */\nexport function MemoizeAll(resolver?: Function | MemoizeConfig<any, any>): LodashMethodDecorator {\n  return decorator(resolver);\n}\nexport { MemoizeAll as memoizeAll };\nexport default decorator;\n"]}