{"version":3,"file":"defer.js","sourceRoot":"","sources":["src/defer.ts"],"names":[],"mappings":";;AAAA,oCAAuC;AAEvC,qCAAqF;AACrF,6CAAiD;AAEjD,IAAM,SAAS,GAAG,0BAAgB,CAAC,eAAe,CAChD,IAAI,yBAAe,CAAC,KAAK,EAAE,IAAI,8BAAgB,EAAE,EAAE,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC,CACrE,CAAC;AAEF;;;;;;;;;;;;;;;;;;;;;;;;GAwBG;AACH;IAAsB,cAAc;SAAd,UAAc,EAAd,qBAAc,EAAd,IAAc;QAAd,yBAAc;;IAClC,MAAM,CAAC,SAAS,eAAI,IAAI,EAAE;AAC5B,CAAC;AAFD,sBAEC;AACiB,sBAAK;AACvB,kBAAe,SAAS,CAAC","sourcesContent":["import defer = require('lodash/defer');\n\nimport { DecoratorConfig, DecoratorFactory, LodashMethodDecorator } from './factory';\nimport { InvokeApplicator } from './applicators';\n\nconst decorator = DecoratorFactory.createDecorator(\n  new DecoratorConfig(defer, new InvokeApplicator(), { setter: true })\n);\n\n/**\n * Defers invoking the func until the current call stack has cleared. Any additional arguments are provided to func when it's invoked.\n *\n * @param {...*} [args] Additional arguments to invoke the function with\n * @example\n *\n * class MyClass {\n *   value = 100;\n *\n *   @Defer()\n *   add(a) {\n *     this.value += a;\n *   }\n * }\n *\n * const myClass = new MyClass();\n *\n * myClass.add(10);\n *\n * myClass.value; // => 100;\n *\n * setTimeout(() => {\n *   myClass.value; // => 110;\n * }, 0);\n */\nexport function Defer(...args: any[]): LodashMethodDecorator {\n  return decorator(...args);\n}\nexport { Defer as defer };\nexport default decorator;\n"]}