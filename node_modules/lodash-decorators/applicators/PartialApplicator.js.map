{"version":3,"file":"PartialApplicator.js","sourceRoot":"","sources":["../src/applicators/PartialApplicator.ts"],"names":[],"mappings":";;;AAAA,2CAA4D;AAC5D,kCAA2C;AAE3C;IAAuC,6CAAU;IAAjD;;IAMA,CAAC;IALC,iCAAK,GAAL,UAAM,EAAuD;YAArD,cAAI,EAAE,kBAAM,EAAY,2BAAO;QACrC,MAAM,CAAC;YAAS,oBAAoB;iBAApB,UAAoB,EAApB,qBAAoB,EAApB,IAAoB;gBAApB,+BAAoB;;YAClC,MAAM,CAAC,OAAO,gBAAC,uBAAe,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,IAAI,EAAE,MAAM,CAAC,SAAK,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,GAAE,KAAK,CAAC,IAAI,EAAE,UAAU,CAAC,CAAC;QACnG,CAAC,CAAA;IACH,CAAC;IACH,wBAAC;AAAD,CAAC,AAND,CAAuC,uBAAU,GAMhD;AANY,8CAAiB","sourcesContent":["import { Applicator, ApplicateOptions } from './Applicator';\nimport { resolveFunction } from '../utils';\n\nexport class PartialApplicator extends Applicator {\n  apply({ args, target, config: { execute } }: ApplicateOptions): any {\n    return function(...invokeArgs: any[]): any {\n      return execute(resolveFunction(args[0], this, target), ...args.slice(1)).apply(this, invokeArgs);\n    }\n  }\n}"]}