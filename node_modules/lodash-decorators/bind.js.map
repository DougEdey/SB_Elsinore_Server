{"version":3,"file":"bind.js","sourceRoot":"","sources":["src/bind.ts"],"names":[],"mappings":";;AAAA,kCAAqC;AAErC,qCAAqF;AACrF,6CAA+C;AAE/C,IAAM,SAAS,GAAG,0BAAgB,CAAC,uBAAuB,CACxD,IAAI,yBAAe,CAAC,IAAI,EAAE,IAAI,4BAAc,EAAE,CAAC,CAChD,CAAC;AAEF;;;;;;;;;;;;;;;;;;;;;;;;GAwBG;AACH;IAAqB,kBAAkB;SAAlB,UAAkB,EAAlB,qBAAkB,EAAlB,IAAkB;QAAlB,6BAAkB;;IACrC,MAAM,CAAC,SAAS,eAAI,QAAQ,EAAE;AAChC,CAAC;AAFD,oBAEC;AACgB,oBAAI;AACrB,kBAAe,SAAS,CAAC","sourcesContent":["import bind = require('lodash/bind');\n\nimport { DecoratorConfig, DecoratorFactory, LodashMethodDecorator } from './factory';\nimport { BindApplicator } from './applicators';\n\nconst decorator = DecoratorFactory.createInstanceDecorator(\n  new DecoratorConfig(bind, new BindApplicator())\n);\n\n/**\n * Creates a function that invokes func with the this binding of thisArg and partials prepended to the arguments it receives.\n *\n * The _.bind.placeholder value, which defaults to _ in monolithic builds, may be used as a placeholder for partially applied arguments.\n *\n * Note: Unlike native Function#bind, this method doesn't set the \"length\" property of bound functions.\n * @param {...*} [partials] The argument to be partially applied.\n * @example\n *\n * class MyClass {\n *   @Bind()\n *   bound() {\n *     return this;\n *   }\n *\n *   unbound() {\n *     return this;\n *   }\n * }\n *\n * const myClass = new MyClass();\n *\n * myClass.bound.call(null); // => myClass {}\n * myClass.unbound.call(null); // => null\n */\nexport function Bind(...partials: any[]): LodashMethodDecorator {\n  return decorator(...partials);\n}\nexport { Bind as bind };\nexport default decorator;\n"]}